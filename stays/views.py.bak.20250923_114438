from django.http import JsonResponse, HttpResponse
from django.shortcuts import render, get_object_or_404
from django.utils.html import escape
from django.urls import reverse, NoReverseMatch

from .models import Stay

# ---------- helpers ----------

def _to_float(v):
    try:
        return float(v) if v is not None else None
    except (TypeError, ValueError):
        return None

def _detail_url_for(s):
    """Return a usable detail/edit URL if available (used in map popup)."""
    for name in ('stay_edit', 'stay_detail'):
        try:
            return reverse(f"stays:{name}", args=[s.id])
        except NoReverseMatch:
            pass
    return ""

# ---------- core pages ----------

def stay_list(request):
    qs = Stay.objects.all().order_by('-check_in', '-id')
    states = (Stay.objects.exclude(state__isnull=True).exclude(state='')
              .values_list('state', flat=True).distinct().order_by('state'))
    ctx = dict(
        stays=qs,
        states=states,
        selected_state=request.GET.get('state', ''),
    )
    return render(request, 'stays/stay_list.html', ctx)

def stays_map_data(request):
    """Return JSON for map pins; accepts optional ?state=&city= filters."""
    qs = Stay.objects.all()
    state = request.GET.get("state")
    city = request.GET.get("city")
    if state:
        qs = qs.filter(state__iexact=state)
    if city:
        qs = qs.filter(city__iexact=city)

    qs = qs.exclude(latitude__isnull=True).exclude(longitude__isnull=True)

    out = []
    for s in qs:
        name = getattr(s, "park", None) or getattr(s, "site_name", None) or getattr(s, "location", "") or f"Stay #{s.pk}"
        city_val = getattr(s, "city", "") or ""
        state_val = getattr(s, "state", "") or ""
        popup = f"<strong>{escape(name)}</strong><br>{escape(city_val)}, {escape(state_val)}"
        out.append({
            "id": s.pk,
            "name": name,
            "latitude": _to_float(getattr(s, 'latitude', None)),
            "longitude": _to_float(getattr(s, 'longitude', None)),
            "popup_html": popup,
            "detail_url": _detail_url_for(s),
        })
    return JsonResponse({"stays": out}, json_dumps_params={"ensure_ascii": False})

# ---------- CRUD stubs (replace with real forms later) ----------

def stay_add(request):
    return HttpResponse("Stay Add â€” placeholder")

def stay_edit(request, pk):
    _ = get_object_or_404(Stay, pk=pk)
    return HttpResponse(f"Stay Edit â€” placeholder for #{pk}")

# ---------- misc routes referenced elsewhere (stubs so URLs load) ----------

def map_view(request):
    # Reuse list so /stays/map/ shows something useful if linked
    return stay_list(request)

def appearance_view(request):
    return HttpResponse("Appearance â€” placeholder")

def export_view(request):
    return HttpResponse("Export â€” placeholder")

def import_view(request):
    return HttpResponse("Import â€” placeholder")

def charts_view(request):
    return HttpResponse("Charts â€” placeholder")

# Custom error handlers (if project config points to them)
def custom_404(request, exception):  # pragma: no cover
    return HttpResponse("Not found", status=404)

def custom_500(request):  # pragma: no cover
    return HttpResponse("Server error", status=500)

def custom_403(request, exception):  # pragma: no cover
    return HttpResponse("Forbidden", status=403)

def custom_400(request, exception):  # pragma: no cover
    return HttpResponse("Bad request", status=400)

def stays_charts(request):
    return render(request, "stays/charts.html", {})

def stays_import(request):
    return render(request, "stays/import.html", {})

def stays_export(request):
    return render(request, "stays/export.html", {})
